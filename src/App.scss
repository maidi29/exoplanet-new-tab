@use "sass:math";
@use "sass:list";
@use "sass:string";

.sky {
  width: 100%;
  height: 100vh;
  padding: 0;
  margin: 0;
}
// create box shadows at random x/y values (max value 3500) with random blur radius (max value 3)
@function box-shadow($stars) {
  $boxshadow: ();
  @for $i from 1 to $stars {
    $boxshadow: list.append($boxshadow, (math.random(3000) + 0px) (math.random(2700) + 0px) (math.random(3) + 0px) #fff, comma);
  }
  @return $boxshadow;
}

@function random-star-count($min, $max) {
  @return math.random($max - $min) + $min;
}

@function generate-box-shadow($min, $max) {
  @return box-shadow(random-star-count($min, $max));
}

// create random number of stars
$boxshadow-large: generate-box-shadow(200, 600);
$boxshadow-medium: generate-box-shadow(200, 650);
$boxshadow-small: generate-box-shadow(200, 700);

@mixin star-properties($size, $shadow, $animation, $animation-duration) {
  height: $size;
  width: $size;
  box-shadow: $shadow;
  animation: $animation $animation-duration infinite;
}

.stars {
  background: transparent;
  border-radius: 3px;

  &.large {
    @include star-properties(4px, $boxshadow-large, blink-large, 4.5s);
  }
  &.medium {
    @include star-properties(3px, $boxshadow-medium, blink-medium, 3s);
  }
  &.small {
    @include star-properties(2px, $boxshadow-small, blink-small, 2s);
  }
}

@mixin blink($name, $shadow) {
  @keyframes #{$name} {
    0% {
      box-shadow: $shadow;
    }
    70% {
      //decide for each star to either set to transparent or default color (if it blinks or not)
      $colors: '#FFFDED', 'transparent';
      $stars: $shadow;
      @for $i from 1 to list.length($stars) {
        $star: list.set-nth(list.nth($stars, $i), 4, string.unquote(list.nth($colors, math.random(list.length($colors)))));
        $stars: list.set-nth($stars, $i, $star);
      }
      box-shadow: $stars;
    }
    100% {
      box-shadow: $shadow;
    }
  }
}

@include blink(blink-small, $boxshadow-small);
@include blink(blink-medium, $boxshadow-medium);
@include blink(blink-large, $boxshadow-large);



